{"file":"index-C2merokO.js","mappings":";;;AAGA,SAAS,QAAQ,OAAO,UAAU,IAAI;AACpC,QAAM,OAAO,QAAQ,QAAQ,WAAU;AACvC,MAAI,MAAM;AACR,QAAI,CAAC,KAAK;AACR,aAAO,cAAc,MAAM,OAAO,OAAO;AAC3C,WAAO,KAAK,KAAK,OAAO,OAAO;AAAA,EAChC;AACH;AACA,SAAS,cAAc,MAAM,OAAO,UAAU,CAAA,GAAI;AAChD,QAAM,cAAc,IAAI,KAAK;AAC7B,QAAM,gBAAgB,IAAI,CAAA,CAAE;AAC5B,cAAY,MAAM;AAChB,kBAAc,QAAQ,YAAY,QAAQ,CAAA,IAAK,sBAAsB,KAAK;AAAA,EAC9E,CAAG;AACD,QAAM,QAAQ,KAAK,KAAK,cAAc,OAAO,OAAO;AACpD,QAAM,eAAe,CAAC,MAAM;AAC1B,UAAM,MAAM,CAAC;AAAA,EACjB,CAAG;AACU,qBAAqB;AAYhC,SAAO;AACT;AC1BA,MAAM,sBAAsB;AAAA,EAC1B;AACF;AAAA,CACoC;AAAA,EAClC,eAAe,CAAC,GAAG,qBAAqB,GAAG,eAAe;AAC5D;","names":[],"sources":["../../../../node_modules/@unhead/vue/dist/shared/vue.8fc199ce.mjs","../../../../node_modules/@unhead/vue/dist/index.mjs"],"sourcesContent":["import { ref, watchEffect, watch, getCurrentInstance, onBeforeUnmount, onDeactivated, onActivated } from 'vue';\r\nimport { i as injectHead, r as resolveUnrefHeadInput } from './vue.f49591ad.mjs';\r\n\r\nfunction useHead(input, options = {}) {\r\n  const head = options.head || injectHead();\r\n  if (head) {\r\n    if (!head.ssr)\r\n      return clientUseHead(head, input, options);\r\n    return head.push(input, options);\r\n  }\r\n}\r\nfunction clientUseHead(head, input, options = {}) {\r\n  const deactivated = ref(false);\r\n  const resolvedInput = ref({});\r\n  watchEffect(() => {\r\n    resolvedInput.value = deactivated.value ? {} : resolveUnrefHeadInput(input);\r\n  });\r\n  const entry = head.push(resolvedInput.value, options);\r\n  watch(resolvedInput, (e) => {\r\n    entry.patch(e);\r\n  });\r\n  const vm = getCurrentInstance();\r\n  if (vm) {\r\n    onBeforeUnmount(() => {\r\n      entry.dispose();\r\n    });\r\n    onDeactivated(() => {\r\n      deactivated.value = true;\r\n    });\r\n    onActivated(() => {\r\n      deactivated.value = false;\r\n    });\r\n  }\r\n  return entry;\r\n}\r\n\r\nexport { useHead as u };\r\n","import { useScript as useScript$1 } from 'unhead';\r\nexport { CapoPlugin, HashHydrationPlugin, createHeadCore } from 'unhead';\r\nimport { i as injectHead, h as headSymbol, V as Vue3 } from './shared/vue.f49591ad.mjs';\r\nexport { c as createHead, a as createServerHead, r as resolveUnrefHeadInput, s as setHeadInjectionHandler } from './shared/vue.f49591ad.mjs';\r\nimport { composableNames, whitelistSafeInput, unpackMeta } from '@unhead/shared';\r\nimport { u as useHead } from './shared/vue.8fc199ce.mjs';\r\nimport { getCurrentInstance, onMounted, isRef, watch, onScopeDispose, ref } from 'vue';\r\n\r\nconst coreComposableNames = [\r\n  \"injectHead\"\r\n];\r\nconst unheadVueComposablesImports = {\r\n  \"@unhead/vue\": [...coreComposableNames, ...composableNames]\r\n};\r\n\r\nfunction useHeadSafe(input, options = {}) {\r\n  return useHead(input, { ...options, transform: whitelistSafeInput });\r\n}\r\n\r\nfunction registerVueScopeHandlers(script, scope) {\r\n  if (!scope) {\r\n    return;\r\n  }\r\n  const _registerCb = (key, cb) => {\r\n    if (!script._cbs[key]) {\r\n      cb(script.instance);\r\n      return () => {\r\n      };\r\n    }\r\n    let i = script._cbs[key].push(cb);\r\n    const destroy = () => {\r\n      if (i) {\r\n        script._cbs[key]?.splice(i - 1, 1);\r\n        i = null;\r\n      }\r\n    };\r\n    onScopeDispose(destroy);\r\n    return destroy;\r\n  };\r\n  script.onLoaded = (cb) => _registerCb(\"loaded\", cb);\r\n  script.onError = (cb) => _registerCb(\"error\", cb);\r\n}\r\nfunction useScript(_input, _options) {\r\n  const input = typeof _input === \"string\" ? { src: _input } : _input;\r\n  const options = _options || {};\r\n  const head = options?.head || injectHead();\r\n  options.head = head;\r\n  const scope = getCurrentInstance();\r\n  options.eventContext = scope;\r\n  if (scope && typeof options.trigger === \"undefined\") {\r\n    options.trigger = onMounted;\r\n  } else if (isRef(options.trigger)) {\r\n    const refTrigger = options.trigger;\r\n    let off;\r\n    options.trigger = new Promise((resolve) => {\r\n      off = watch(refTrigger, (val) => {\r\n        if (val) {\r\n          resolve(true);\r\n        }\r\n      }, {\r\n        immediate: true\r\n      });\r\n      onScopeDispose(() => resolve(false), true);\r\n    }).then((val) => {\r\n      off?.();\r\n      return val;\r\n    });\r\n  }\r\n  head._scriptStatusWatcher = head._scriptStatusWatcher || head.hooks.hook(\"script:updated\", ({ script: s }) => {\r\n    s._statusRef.value = s.status;\r\n  });\r\n  const script = useScript$1(input, options);\r\n  script._statusRef = script._statusRef || ref(script.status);\r\n  registerVueScopeHandlers(script, scope);\r\n  return new Proxy(script, {\r\n    get(_, key, a) {\r\n      return Reflect.get(_, key === \"status\" ? \"_statusRef\" : key, a);\r\n    }\r\n  });\r\n}\r\n\r\nfunction useSeoMeta(input, options) {\r\n  const { title, titleTemplate, ...meta } = input;\r\n  return useHead({\r\n    title,\r\n    titleTemplate,\r\n    // @ts-expect-error runtime type\r\n    _flatMeta: meta\r\n  }, {\r\n    ...options,\r\n    transform(t) {\r\n      const meta2 = unpackMeta({ ...t._flatMeta });\r\n      delete t._flatMeta;\r\n      return {\r\n        // @ts-expect-error runtime type\r\n        ...t,\r\n        meta: meta2\r\n      };\r\n    }\r\n  });\r\n}\r\n\r\nfunction useServerHead(input, options = {}) {\r\n  const head = options.head || injectHead();\r\n  delete options.head;\r\n  if (head)\r\n    return head.push(input, { ...options, mode: \"server\" });\r\n}\r\n\r\nfunction useServerHeadSafe(input, options = {}) {\r\n  return useHeadSafe(input, { ...options, mode: \"server\" });\r\n}\r\n\r\nfunction useServerSeoMeta(input, options) {\r\n  return useSeoMeta(input, { ...options, mode: \"server\" });\r\n}\r\n\r\nconst Vue2ProvideUnheadPlugin = (_Vue, head) => {\r\n  _Vue.mixin({\r\n    beforeCreate() {\r\n      const options = this.$options;\r\n      const origProvide = options.provide;\r\n      options.provide = function() {\r\n        let origProvideResult;\r\n        if (typeof origProvide === \"function\")\r\n          origProvideResult = origProvide.call(this);\r\n        else\r\n          origProvideResult = origProvide || {};\r\n        return {\r\n          ...origProvideResult,\r\n          [headSymbol]: head\r\n        };\r\n      };\r\n    }\r\n  });\r\n};\r\n\r\nconst VueHeadMixin = {\r\n  created() {\r\n    let source = false;\r\n    if (Vue3) {\r\n      const instance = getCurrentInstance();\r\n      if (!instance)\r\n        return;\r\n      const options = instance.type;\r\n      if (!options || !(\"head\" in options))\r\n        return;\r\n      source = typeof options.head === \"function\" ? () => options.head.call(instance.proxy) : options.head;\r\n    } else {\r\n      const head = this.$options.head;\r\n      if (head) {\r\n        source = typeof head === \"function\" ? () => head.call(this) : head;\r\n      }\r\n    }\r\n    source && useHead(source);\r\n  }\r\n};\r\n\r\nexport { Vue2ProvideUnheadPlugin, VueHeadMixin, injectHead, unheadVueComposablesImports, useHead, useHeadSafe, useScript, useSeoMeta, useServerHead, useServerHeadSafe, useServerSeoMeta };\r\n"],"version":3}